Index: vendor/mustache/src/Mustache/Tokenizer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n/*\r\n * This file is part of Mustache.php.\r\n *\r\n * (c) 2010-2017 Justin Hileman\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\n/**\r\n * Mustache Tokenizer class.\r\n *\r\n * This class is responsible for turning raw template source into a set of Mustache tokens.\r\n */\r\nclass Mustache_Tokenizer\r\n{\r\n    // Finite state machine states\r\n    const IN_TEXT     = 0;\r\n    const IN_TAG_TYPE = 1;\r\n    const IN_TAG      = 2;\r\n\r\n    // Token types\r\n    const T_SECTION      = '#';\r\n    const T_INVERTED     = '^';\r\n    const T_END_SECTION  = '/';\r\n    const T_COMMENT      = '!';\r\n    const T_PARTIAL      = '>';\r\n    const T_PARENT       = '<';\r\n    const T_DELIM_CHANGE = '=';\r\n    const T_ESCAPED      = '_v';\r\n    const T_UNESCAPED    = '{';\r\n    const T_UNESCAPED_2  = '&';\r\n    const T_TEXT         = '_t';\r\n    const T_PRAGMA       = '%';\r\n    const T_BLOCK_VAR    = '$';\r\n    const T_BLOCK_ARG    = '$arg';\r\n\r\n    // Valid token types\r\n    private static $tagTypes = array(\r\n        self::T_SECTION      => true,\r\n        self::T_INVERTED     => true,\r\n        self::T_END_SECTION  => true,\r\n        self::T_COMMENT      => true,\r\n        self::T_PARTIAL      => true,\r\n        self::T_PARENT       => true,\r\n        self::T_DELIM_CHANGE => true,\r\n        self::T_ESCAPED      => true,\r\n        self::T_UNESCAPED    => true,\r\n        self::T_UNESCAPED_2  => true,\r\n        self::T_PRAGMA       => true,\r\n        self::T_BLOCK_VAR    => true,\r\n    );\r\n\r\n    // Token properties\r\n    const TYPE    = 'type';\r\n    const NAME    = 'name';\r\n    const OTAG    = 'otag';\r\n    const CTAG    = 'ctag';\r\n    const LINE    = 'line';\r\n    const INDEX   = 'index';\r\n    const END     = 'end';\r\n    const INDENT  = 'indent';\r\n    const NODES   = 'nodes';\r\n    const VALUE   = 'value';\r\n    const FILTERS = 'filters';\r\n\r\n    private $state;\r\n    private $tagType;\r\n    private $buffer;\r\n    private $tokens;\r\n    private $seenTag;\r\n    private $line;\r\n    private $otag;\r\n    private $ctag;\r\n    private $otagLen;\r\n    private $ctagLen;\r\n\r\n    /**\r\n     * Scan and tokenize template source.\r\n     *\r\n     * @throws Mustache_Exception_SyntaxException when mismatched section tags are encountered\r\n     *\r\n     * @param string $text       Mustache template source to tokenize\r\n     * @param string $delimiters Optionally, pass initial opening and closing delimiters (default: null)\r\n     *\r\n     * @return array Set of Mustache tokens\r\n     */\r\n    public function scan($text, $delimiters = null)\r\n    {\r\n        // Setting mbstring.func_overload makes things *really* slow.\r\n        // Let's do everyone a favor and scan this string as ASCII instead.\r\n        //\r\n        // @codeCoverageIgnoreStart\r\n        $encoding = null;\r\n        if (function_exists('mb_internal_encoding') && ini_get('mbstring.func_overload') & 2) {\r\n            $encoding = mb_internal_encoding();\r\n            mb_internal_encoding('ASCII');\r\n        }\r\n        // @codeCoverageIgnoreEnd\r\n\r\n        $this->reset();\r\n\r\n        if ($delimiters = trim($delimiters)) {\r\n            $this->setDelimiters($delimiters);\r\n        }\r\n\r\n        $len = strlen($text);\r\n        for ($i = 0; $i < $len; $i++) {\r\n            switch ($this->state) {\r\n                case self::IN_TEXT:\r\n                    if ($this->tagChange($this->otag, $this->otagLen, $text, $i)) {\r\n                        $i--;\r\n                        $this->flushBuffer();\r\n                        $this->state = self::IN_TAG_TYPE;\r\n                    } else {\r\n                        $char = $text[$i];\r\n                        $this->buffer .= $char;\r\n                        if ($char === \"\\n\") {\r\n                            $this->flushBuffer();\r\n                            $this->line++;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case self::IN_TAG_TYPE:\r\n                    $i += $this->otagLen - 1;\r\n                    $char = $text[$i + 1];\r\n                    if (isset(self::$tagTypes[$char])) {\r\n                        $tag = $char;\r\n                        $this->tagType = $tag;\r\n                    } else {\r\n                        $tag = null;\r\n                        $this->tagType = self::T_ESCAPED;\r\n                    }\r\n\r\n                    if ($this->tagType === self::T_DELIM_CHANGE) {\r\n                        $i = $this->changeDelimiters($text, $i);\r\n                        $this->state = self::IN_TEXT;\r\n                    } elseif ($this->tagType === self::T_PRAGMA) {\r\n                        $i = $this->addPragma($text, $i);\r\n                        $this->state = self::IN_TEXT;\r\n                    } else {\r\n                        if ($tag !== null) {\r\n                            $i++;\r\n                        }\r\n                        $this->state = self::IN_TAG;\r\n                    }\r\n                    $this->seenTag = $i;\r\n                    break;\r\n\r\n                default:\r\n                    if ($this->tagChange($this->ctag, $this->ctagLen, $text, $i)) {\r\n                        $token = array(\r\n                            self::TYPE  => $this->tagType,\r\n                            self::NAME  => trim($this->buffer),\r\n                            self::OTAG  => $this->otag,\r\n                            self::CTAG  => $this->ctag,\r\n                            self::LINE  => $this->line,\r\n                            self::INDEX => ($this->tagType === self::T_END_SECTION) ? $this->seenTag - $this->otagLen : $i + $this->ctagLen,\r\n                        );\r\n\r\n                        if ($this->tagType === self::T_UNESCAPED) {\r\n                            // Clean up `{{{ tripleStache }}}` style tokens.\r\n                            if ($this->ctag === '}}') {\r\n                                if (($i + 2 < $len) && $text[$i + 2] === '}') {\r\n                                    $i++;\r\n                                } else {\r\n                                    $msg = sprintf(\r\n                                        'Mismatched tag delimiters: %s on line %d',\r\n                                        $token[self::NAME],\r\n                                        $token[self::LINE]\r\n                                    );\r\n\r\n                                    throw new Mustache_Exception_SyntaxException($msg, $token);\r\n                                }\r\n                            } else {\r\n                                $lastName = $token[self::NAME];\r\n                                if (substr($lastName, -1) === '}') {\r\n                                    $token[self::NAME] = trim(substr($lastName, 0, -1));\r\n                                } else {\r\n                                    $msg = sprintf(\r\n                                        'Mismatched tag delimiters: %s on line %d',\r\n                                        $token[self::NAME],\r\n                                        $token[self::LINE]\r\n                                    );\r\n\r\n                                    throw new Mustache_Exception_SyntaxException($msg, $token);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $this->buffer = '';\r\n                        $i += $this->ctagLen - 1;\r\n                        $this->state = self::IN_TEXT;\r\n                        $this->tokens[] = $token;\r\n                    } else {\r\n                        $this->buffer .= $text[$i];\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        $this->flushBuffer();\r\n\r\n        // Restore the user's encoding...\r\n        // @codeCoverageIgnoreStart\r\n        if ($encoding) {\r\n            mb_internal_encoding($encoding);\r\n        }\r\n        // @codeCoverageIgnoreEnd\r\n\r\n        return $this->tokens;\r\n    }\r\n\r\n    /**\r\n     * Helper function to reset tokenizer internal state.\r\n     */\r\n    private function reset()\r\n    {\r\n        $this->state   = self::IN_TEXT;\r\n        $this->tagType = null;\r\n        $this->buffer  = '';\r\n        $this->tokens  = array();\r\n        $this->seenTag = false;\r\n        $this->line    = 0;\r\n        $this->otag    = '{{';\r\n        $this->ctag    = '}}';\r\n        $this->otagLen = 2;\r\n        $this->ctagLen = 2;\r\n    }\r\n\r\n    /**\r\n     * Flush the current buffer to a token.\r\n     */\r\n    private function flushBuffer()\r\n    {\r\n        if (strlen($this->buffer) > 0) {\r\n            $this->tokens[] = array(\r\n                self::TYPE  => self::T_TEXT,\r\n                self::LINE  => $this->line,\r\n                self::VALUE => $this->buffer,\r\n            );\r\n            $this->buffer   = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the current Mustache delimiters. Set new `otag` and `ctag` values.\r\n     *\r\n     * @param string $text  Mustache template source\r\n     * @param int    $index Current tokenizer index\r\n     *\r\n     * @return int New index value\r\n     */\r\n    private function changeDelimiters($text, $index)\r\n    {\r\n        $startIndex = strpos($text, '=', $index) + 1;\r\n        $close      = '=' . $this->ctag;\r\n        $closeIndex = strpos($text, $close, $index);\r\n\r\n        $this->setDelimiters(trim(substr($text, $startIndex, $closeIndex - $startIndex)));\r\n\r\n        $this->tokens[] = array(\r\n            self::TYPE => self::T_DELIM_CHANGE,\r\n            self::LINE => $this->line,\r\n        );\r\n\r\n        return $closeIndex + strlen($close) - 1;\r\n    }\r\n\r\n    /**\r\n     * Set the current Mustache `otag` and `ctag` delimiters.\r\n     *\r\n     * @param string $delimiters\r\n     */\r\n    private function setDelimiters($delimiters)\r\n    {\r\n        list($otag, $ctag) = explode(' ', $delimiters);\r\n        $this->otag = $otag;\r\n        $this->ctag = $ctag;\r\n        $this->otagLen = strlen($otag);\r\n        $this->ctagLen = strlen($ctag);\r\n    }\r\n\r\n    /**\r\n     * Add pragma token.\r\n     *\r\n     * Pragmas are hoisted to the front of the template, so all pragma tokens\r\n     * will appear at the front of the token list.\r\n     *\r\n     * @param string $text\r\n     * @param int    $index\r\n     *\r\n     * @return int New index value\r\n     */\r\n    private function addPragma($text, $index)\r\n    {\r\n        $end    = strpos($text, $this->ctag, $index);\r\n        $pragma = trim(substr($text, $index + 2, $end - $index - 2));\r\n\r\n        // Pragmas are hoisted to the front of the template.\r\n        array_unshift($this->tokens, array(\r\n            self::TYPE => self::T_PRAGMA,\r\n            self::NAME => $pragma,\r\n            self::LINE => 0,\r\n        ));\r\n\r\n        return $end + $this->ctagLen - 1;\r\n    }\r\n\r\n    /**\r\n     * Test whether it's time to change tags.\r\n     *\r\n     * @param string $tag    Current tag name\r\n     * @param int    $tagLen Current tag name length\r\n     * @param string $text   Mustache template source\r\n     * @param int    $index  Current tokenizer index\r\n     *\r\n     * @return bool True if this is a closing section tag\r\n     */\r\n    private function tagChange($tag, $tagLen, $text, $index)\r\n    {\r\n        return substr($text, $index, $tagLen) === $tag;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/mustache/src/Mustache/Tokenizer.php b/vendor/mustache/src/Mustache/Tokenizer.php
--- a/vendor/mustache/src/Mustache/Tokenizer.php	(revision a5793711b02e54419289440f3e10db5449718add)
+++ b/vendor/mustache/src/Mustache/Tokenizer.php	(date 1760906520512)
@@ -102,7 +102,7 @@
 
         $this->reset();
 
-        if ($delimiters = trim($delimiters)) {
+        if ($delimiters = trim($delimiters ?? '')) {
             $this->setDelimiters($delimiters);
         }
 
Index: css/login.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    text-decoration: none;\r\n    font-size: 16px;\r\n}\r\n\r\nmain {\r\n    background-image: url(../imagenes/texture-lobby.png);\r\n    background-size: cover;\r\n    min-height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n#contenedor-login {\r\n    width: 30vw;\r\n    height: 70vh;\r\n    background-color: #FDF6E3;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-radius: 12px;\r\n    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.15),\r\n        0px 6px 20px rgba(0, 0, 0, 0.2);\r\n    position: relative;\r\n}\r\n\r\n#volver {\r\n    position: absolute;\r\n    padding: 0.5em 1em;\r\n    left: 0.5em;\r\n    top: 0.5em\r\n}\r\n\r\n.oculto {\r\n    display: none;\r\n}\r\n\r\n#login-sup {\r\n    padding: 1em;\r\n    width: 100%;\r\n    height: 70%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    align-items: center;\r\n}\r\n\r\n#login-img {\r\n    height: 70%;\r\n    border-radius: 12px;\r\n    margin-bottom: 1em;\r\n}\r\n\r\n#login-descripcion {\r\n    font-weight: bold;\r\n    font-size: 2.2em;\r\n}\r\n\r\n#login-inf {\r\n    padding: 1em;\r\n    width: 100%;\r\n    height: 30%;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 2fr 1fr;\r\n    gap: 1em;\r\n}\r\n\r\n#contenedor-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1em;\r\n}\r\n\r\n.label {\r\n    font-weight: bold;\r\n    font-size: 1.3em;\r\n}\r\n\r\n.email {\r\n    border: 0;\r\n    border-radius: 12px;\r\n    background-color: #8773be3d;\r\n    padding: 1em;\r\n    outline: none;\r\n}\r\n\r\n.btn {\r\n    border-radius: 12px;\r\n    border: none;\r\n    background-color: #8773be;\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: #7358bb;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/css/login.css b/css/login.css
--- a/css/login.css	(revision a5793711b02e54419289440f3e10db5449718add)
+++ b/css/login.css	(date 1760906520534)
@@ -19,7 +19,7 @@
 
 #contenedor-login {
     width: 30vw;
-    height: 70vh;
+    height: 90vh;
     background-color: #FDF6E3;
     display: flex;
     flex-direction: column;
Index: vista/registrarseVista.mustache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><link rel=\"stylesheet\" href=\"/Pw2Grupo10TN/css/register.css\">\r\n<main>\r\n    <section id=\"contenedor-registro\">\r\n        <div id=\"registro-sup\">\r\n            <img id=\"registro-img\" src=\"/Pw2Grupo10TN/imagenes/logo.jpg\" alt=\"Logo del juego\">\r\n            <h2 id=\"registro-descripcion\">Crear una cuenta</h2>\r\n        </div>\r\n\r\n        <div id=\"registro-inf\">\r\n\r\n            {{#error}}\r\n                <p class=\"error-mensaje\">{{error}}</p>\r\n            {{/error}}\r\n\r\n            <form action=\"/Pw2Grupo10TN/register/procesarRegistro\" method=\"POST\" id=\"contenedor-form-registro\">\r\n\r\n                <label class=\"label\" for=\"nombre\">Nombre completo:</label>\r\n                <input id=\"nombre\" class=\"input-registro\" placeholder=\"Juan Pérez\" name=\"nombreCompleto\" type=\"text\" required>\r\n\r\n                <label class=\"label\" for=\"nombre_usuario\">Usuario:</label>\r\n                <input id=\"nombre_usuario\" class=\"input-registro\" placeholder=\"Juan Pérez\" name=\"nombre_usuario\" type=\"text\" required>\r\n\r\n                <label class=\"label\" for=\"sexo\">Sexo:</label>\r\n                <select id=\"sexo\" name=\"sexo\">\r\n                    <option value=\"Masculino\">Masculino</option>\r\n                    <option value=\"Femenino\">Femenino</option>\r\n                    <option value=\"Prefiero no cargarlo\">Prefiero no cargarlo</option>\r\n                </select>\r\n\r\n                <label class=\"label\" for=\"año\">Año de Nacimiento:</label>\r\n                <input id=\"año\" class=\"input-registro\" placeholder=\"2000\" name=\"año\" type=\"number\" required>\r\n\r\n                <label class=\"label\" for=\"pais\">Pais:</label>\r\n                <input id=\"pais\" class=\"input-registro\" placeholder=\"Argentina\" name=\"pais\" type=\"text\" required>\r\n\r\n                <label class=\"label\" for=\"ciudad\">Ciudad:</label>\r\n                <input id=\"ciudad\" class=\"input-registro\" placeholder=\"Argentina\" name=\"ciudad\" type=\"text\" required>\r\n\r\n                <label class=\"label\" for=\"email\">Email:</label>\r\n                <input id=\"email\" class=\"input-registro\" placeholder=\"example@algo.com\" name=\"email\" type=\"email\" required>\r\n\r\n                <label class=\"label\" for=\"password\">Contraseña:</label>\r\n                <input id=\"password\" class=\"input-registro\" placeholder=\"••••••••\" name=\"password\" type=\"password\" required>\r\n\r\n                <button type=\"submit\" id=\"btn-registrar\" class=\"btn\">Registrarse</button>\r\n\r\n            </form>\r\n\r\n            <a href=\"/Pw2Grupo10TN/login\" class=\"mt-3\">¿Ya tienes una cuenta? Inicia sesión</a>\r\n        </div>\r\n    </section>\r\n</main>\r\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11.26.2/dist/sweetalert2.all.min.js\"></script>\r\n<link href=\"https://cdn.jsdelivr.net/npm/sweetalert2@11.26.2/dist/sweetalert2.min.css\" rel=\"stylesheet\">
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vista/registrarseVista.mustache b/vista/registrarseVista.mustache
--- a/vista/registrarseVista.mustache	(revision a5793711b02e54419289440f3e10db5449718add)
+++ b/vista/registrarseVista.mustache	(date 1760906520546)
@@ -1,4 +1,4 @@
-<link rel="stylesheet" href="/Pw2Grupo10TN/css/register.css">
+<link rel="stylesheet" href="/css/register.css">
 <main>
     <section id="contenedor-registro">
         <div id="registro-sup">
@@ -42,7 +42,7 @@
                 <label class="label" for="password">Contraseña:</label>
                 <input id="password" class="input-registro" placeholder="••••••••" name="password" type="password" required>
 
-                <button type="submit" id="btn-registrar" class="btn">Registrarse</button>
+                <button type="submit" id="btn-registrar" class="btn ">Registrarse</button>
 
             </form>
 
Index: vista/loginVista.mustache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><link rel=\"stylesheet\" href=\"css/login.css\">\r\n<main>\r\n        <section id=\"contenedor-login\">\r\n            <button id=\"volver\" class=\"btn oculto\">Volver</button>\r\n            <div id=\"login-sup\">\r\n                <img id=\"login-img\" src=\"imagenes/logo.jpg\" alt=\"\">\r\n                <h2 id=\"login-descripcion\">Iniciar sesión</h2>\r\n            </div>\r\n            <div id=\"login-inf\">\r\n\r\n                <div id=\"contenedor-form\">\r\n                    <label id=\"label-email\" class=\"label\" for=\"email\">Ingrese su email:</label>\r\n                    <input id=\"email\" class=\"email\" placeholder=\"example@algo.com\" name=\"email\" type=\"text\">\r\n                </div>\r\n\r\n                <button id=\"submit\" class=\"btn\">Verificar</button>\r\n\r\n                <a href=\"register/registrar\" class=\"mt-3\">¿No tienes una cuenta? Regístrate</a>\r\n\r\n            </div>\r\n        </section>\r\n</main>\r\n<script type=\"module\" src=\"../js/login.js\"></script>\r\n<script src=\"\r\nhttps://cdn.jsdelivr.net/npm/sweetalert2@11.26.2/dist/sweetalert2.all.min.js\r\n\"></script>\r\n<link href=\"\r\nhttps://cdn.jsdelivr.net/npm/sweetalert2@11.26.2/dist/sweetalert2.min.css\r\n\" rel=\"stylesheet\">\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vista/loginVista.mustache b/vista/loginVista.mustache
--- a/vista/loginVista.mustache	(revision a5793711b02e54419289440f3e10db5449718add)
+++ b/vista/loginVista.mustache	(date 1760906520567)
@@ -1,4 +1,5 @@
 <link rel="stylesheet" href="css/login.css">
+
 <main>
         <section id="contenedor-login">
             <button id="volver" class="btn oculto">Volver</button>
@@ -13,9 +14,9 @@
                     <input id="email" class="email" placeholder="example@algo.com" name="email" type="text">
                 </div>
 
-                <button id="submit" class="btn">Verificar</button>
+                <button id="submit" class="btn btn-primary">Verificar</button>
 
-                <a href="register/registrar" class="mt-3">¿No tienes una cuenta? Regístrate</a>
+                <a href="register/registrar" class="">¿No tienes una cuenta? Regístrate</a>
 
             </div>
         </section>
